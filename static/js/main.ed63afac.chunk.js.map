{"version":3,"sources":["components/card/card.styles.js","components/card/card.component.jsx","components/card-list/card-list.styles.js","components/card-list/card-list.component.jsx","components/searchBox/serch-box.styles.js","components/searchBox/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["CardContainer","styled","div","Card","props","alt","src","monster","id","name","email","CardWrap","CardList","monsters","map","key","SearchContainer","input","SearchBox","placeholder","handleChange","className","type","onChange","App","e","setState","searchBox","target","value","state","loading","fetch","then","res","json","users","this","filterdMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6rBAGO,IAAMA,EAAgBC,IAAOC,IAAV,KCCbC,EAAO,SAAAC,GAAK,OACvB,kBAACJ,EAAD,KACE,yBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEL,4BAAKJ,EAAMG,QAAQE,MACnB,2BAAIL,EAAMG,QAAQG,S,gLCRf,IAAMC,EAAWV,IAAOC,IAAV,KCCRU,EAAW,SAAAR,GAAK,OAC3B,kBAACO,EAAD,KACGP,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,S,0MCJ/B,IAAMS,EAAkBf,IAAOgB,MAAV,KCCfC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,kBAACJ,EAAD,CACIK,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KC0CHI,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAgBFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEC,UAAWF,EAAEG,OAAOC,SAhBpC,EAAKC,MAAQ,CACXjB,SAAU,GACVc,UAAW,GACXI,SAAS,GALC,E,gEASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OACT,EAAKV,SAAS,CAAEb,SAAUuB,EAAOL,SAAS,S,+BAQtC,IAAD,EACkCM,KAAKP,MAAtCjB,EADD,EACCA,SAAUc,EADX,EACWA,UAAWI,EADtB,EACsBA,QACvBO,EAAkBzB,EAAS0B,QAAO,SAAAhC,GAAO,OAAIA,EAAQE,KAAK+B,cAAcC,SAASd,EAAUe,wBACjG,OACE,yBAAKrB,UAAU,QACA,IAAZU,EACC,6BACE,8CACA,kBAAC,EAAD,CACEZ,YAAY,iBACZC,aAAciB,KAAKjB,eACrB,kBAAC,EAAD,CAAUP,SAAUyB,KAGpB,uD,GApCMK,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ed63afac.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\n\r\nexport const CardContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #f6d186;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  padding: 25px;\r\n  cursor: pointer;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  backface-visibility: hidden;\r\n  transform: translateZ(0);\r\n  transition: transform 0.5s ease-out;\r\n&:hover {\r\n  transform: scale(1.05);\r\n}\r\n`","import React from \"react\";\r\n\r\nimport { CardContainer } from \"./card.styles\";\r\n\r\nexport const Card = props => (\r\n  <CardContainer>\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </CardContainer>\r\n);\r\n","import styled from 'styled-components'\r\n\r\n\r\nexport const CardWrap = styled.div`\r\nwidth: 85vw;\r\nmargin: 0 auto;\r\ndisplay: grid;\r\ngrid-template-columns: 1fr 1fr 1fr 1fr;\r\ngrid-gap: 20px;\r\n`\r\n\r\n\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport { CardWrap } from \"./card-list.styles\";\r\n\r\nexport const CardList = props => (\r\n  <CardWrap>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </CardWrap>\r\n);\r\n","import styled from 'styled-components';\r\n\r\n\r\nexport const SearchContainer = styled.input`\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px;\r\n  width: 150px;\r\n  margin: 30px;\r\n  border-radius: 5%;\r\n  font-weight: 500\r\n  `\r\n","import React from 'react';\r\n\r\nimport { SearchContainer } from './serch-box.styles'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <SearchContainer\r\n        className='search'\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange} />\r\n)","import React from \"react\";\n\n\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/searchBox/search-box.component'\nimport './App.styles.css'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchBox: '',\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users =>\n        this.setState({ monsters: users, loading: false })\n      );\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchBox: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchBox, loading } = this.state;\n    const filterdMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchBox.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        {loading === false ? (\n          <div>\n            <h1>Monster legend</h1>\n            <SearchBox\n              placeholder=\"Search monster\"\n              handleChange={this.handleChange} />\n            <CardList monsters={filterdMonsters} />\n          </div>\n        ) : (\n            <h1>Loding Monsters...</h1>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}